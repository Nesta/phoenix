<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function da_vinci_preprocess_html(&$variables) {
  $variables['html_attributes']['class']= 'no-grid';
  if (theme_get_setting('grid')) {
    $variables['html_attributes']['class'] = 'grid';
  }
  if (theme_get_setting('border-region')) {
    $variables['html_attributes']['class'] = 'border-region no-grid';
  }
  if (theme_get_setting('grid') && theme_get_setting('border-region')) {
    $variables['html_attributes']['class'] = 'grid border-region';
  }
  if (theme_get_setting('responsive-project')) {
    $variables['responsive'] = theme_get_setting('responsive-project');
  }
  if (!empty($variables['page']['featured_top'])) {
    $variables['attributes']['class'][] = 'has-featured-top';
  }
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'node') && (is_numeric($path_args[2]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[2];
  }
  $is_front_page = \Drupal::service('path.matcher')->isFrontPage();

  if ($is_front_page) {
    $variables['#attached']['library'][] = 'da_vinci/front';
  }

	// Load Libraries for Path.
  if (!empty(isset($path_args[2])))  {
    $variables['#attached']['library'][] = 'da_vinci/'.$path_args[1].'-'.$path_args[2];
  }else{
    $variables['#attached']['library'][] = 'da_vinci/'.$path_args[1];
  }
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function da_vinci_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function da_vinci_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Maintenance page.
  $variables['#attached']['library'][] = 'da_vinci/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function da_vinci_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function da_vinci_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }

  // Add the block type class to the custom blocks.
  if (isset($variables['content']['#block_content'])) {
    $block_type = $variables['content']['#block_content']->bundle();
    $variables['attributes']['class'][] = 'block-content-type-' . $block_type;
  }

  $variables['drupalera'] = $GLOBALS['base_url'] . '/' . drupal_get_path('theme','da_vinci') . '/images/la_drupalera.png';
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function da_vinci_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function da_vinci_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Add template suggestions based on the current view mode.
  $node = $variables['elements']['#node'];
  $suggestions[] = 'node__' . $variables['elements']['#view_mode'];
  $suggestions[] = 'node__' . $node->bundle() . '__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function da_vinci_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function da_vinci_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function da_vinci_theme_suggestions_file_link_alter(array &$suggestions, array $variables) {
  // Get the node type.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $type = $node->getType();

    // Create the theme hook suggestion.
    $suggestions[] = 'file_link__' . 'type_' . $type;
  }
}

/**
 * Implements hook_form_alter().
 */
function da_vinci_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['search_block_form', 'search_form'])) {
    $key = ($form_id == 'search_block_form') ? 'actions' : 'basic';
    if (!isset($form[$key]['submit']['#attributes'])) {
      $form[$key]['submit']['#attributes'] = new Attribute();
    }
    $form[$key]['submit']['#attributes']->addClass('search-form__submit');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() to get page template suggestions based on the node type
 */
function da_vinci_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function da_vinci_preprocess_views_view(&$variables) {
  $variables['theme_hook_original'] = $variables['theme_hook_original'] . '__' . $variables['id'];
}

/**
 * Implements theme_suggestions_field_alter().
 */
function da_vinci_theme_suggestions_field_alter(&$suggestions, $variables) {
  // Add a suggestion field template for all the fields of a viewmode.
  $suggestions[] = 'field__' . $variables['element']['#view_mode'];
  // Add a suggestion field template for a field depending on entity, on bundle,
  // on field and on viewmode.
  $suggestions[] = 'field__' . $variables['element']['#field_name'] . '__' . $variables['element']['#entity_type'] . '_' . $variables['element']['#bundle'] . '__' . $variables['element']['#view_mode'];
}
